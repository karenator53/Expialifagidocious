type Token @entity {
  id: ID!
  name: String
  symbol: String
  decimals: Int
  pairs: [Pair!]! @derivedFrom(field: "token0")
  pairs1: [Pair!]! @derivedFrom(field: "token1")
  pools: [Pool!]! @derivedFrom(field: "token0")
  pools1: [Pool!]! @derivedFrom(field: "token1")
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
  derivedETH: BigDecimal!
}

type Factory @entity {
  id: ID!
  pairCount: BigInt!
  totalVolumeUSD: BigDecimal!
  totalLiquidityUSD: BigDecimal!
  txCount: BigInt!
  totalValueLockedUSD: BigDecimal!
}

type Pair @entity {
  id: ID!
  token0: Token!
  token1: Token!
  address: Bytes!
  createdAtBlockNumber: BigInt!
  createdAtTimestamp: BigInt!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!
  reserveUSD: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
}

type Pool @entity {
  id: ID!
  token0: Token!
  token1: Token!
  address: Bytes!
  fee: Int!
  createdAtBlockNumber: BigInt!
  createdAtTimestamp: BigInt!
  liquidity: BigInt!
  sqrtPrice: BigInt!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  tick: BigInt
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
}

type Swap @entity {
  id: ID!
  transaction: Bytes!
  timestamp: BigInt!
  pair: Pair
  pool: Pool
  token0: Token!
  token1: Token!
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  amountUSD: BigDecimal!
  logIndex: BigInt!
}

type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal!
}

type TokenDayData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  priceUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  liquidity: BigDecimal!
  liquidityUSD: BigDecimal!
  txCount: BigInt!
}

type PairDayData @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  pair: Pair!
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  liquidityUSD: BigDecimal!
  txCount: BigInt!
}

type TokenHourData @aggregation(intervals: ["hour"], source: "TokenDayData") {
  id: Int8!
  timestamp: Timestamp!
  token: Token!
  priceUSD: BigDecimal! @aggregate(fn: "last", arg: "priceUSD")
  highPrice: BigDecimal! @aggregate(fn: "max", arg: "priceUSD")
  lowPrice: BigDecimal! @aggregate(fn: "min", arg: "priceUSD")
  volumeUSD: BigDecimal! @aggregate(fn: "sum", arg: "volumeUSD")
  txCount: BigInt! @aggregate(fn: "sum", arg: "txCount")
}

type PairHourData @aggregation(intervals: ["hour"], source: "PairDayData") {
  id: Int8!
  timestamp: Timestamp!
  pair: Pair!
  token0Price: BigDecimal! @aggregate(fn: "last", arg: "token0Price")
  token1Price: BigDecimal! @aggregate(fn: "last", arg: "token1Price")
  volumeToken0: BigDecimal! @aggregate(fn: "sum", arg: "volumeToken0")
  volumeToken1: BigDecimal! @aggregate(fn: "sum", arg: "volumeToken1")
  volumeUSD: BigDecimal! @aggregate(fn: "sum", arg: "volumeUSD")
  txCount: BigInt! @aggregate(fn: "sum", arg: "txCount")
}
